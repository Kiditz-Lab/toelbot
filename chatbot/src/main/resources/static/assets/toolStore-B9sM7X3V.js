import{u as q}from"./useApi-Bby6fr-m.js";import{af as M,N as l,O as j,ao as T,ag as A,aI as O,P as R,aq as F,aJ as p}from"./index-B-4Jq8Ft.js";import{u as P}from"./snackbarStore-KsQP317g.js";import{u as h}from"./agentStore-BHR6fR2_.js";const L=M("toolStore",()=>{const f=l([]),{agent:g}=j(h()),{fetchAgent:S}=h(),v=T(()=>{var e;return((e=g.value)==null?void 0:e.tools)??[]}),t=l({}),m=l(),{showSnackbar:u}=P(),r=q(),w=T(()=>r.loading),i=l(!0),d=A(),C=l({}),b=async()=>{const e=await r.get("/tools",{sort:"name,asc"});f.value=e},y=l(""),a=l({});O(()=>{var o;const e=(o=t.value)==null?void 0:o.env;if(e&&typeof e=="object")for(const s of Object.keys(e))s in a.value||(a.value[s]="")}),R(a,()=>{i.value=!0},{deep:!0});const k=async e=>{var o;try{if(!v.value.includes(e))return;const s=await r.get(`/mcp/agent/${(o=g.value)==null?void 0:o.id}/tools/${e}`);a.value=s.env}catch(s){console.error("Error fetching MCP server:",s)}},$=async e=>{try{const o=await r.get(`/tools/${e}`);t.value=o,t.value.tools.forEach(E),i.value=!v.value.includes(o.id)}catch(o){console.error("Error fetching MCP server:",o)}};F(async()=>{await S()});const D=async e=>{y.value=e.id,p.push({name:"ToolDetail",params:d.params})},E=e=>{var s;e.formData||(e.formData={},e.isValid=!1);const o=((s=e.inputSchema)==null?void 0:s.properties)??{};for(const[n,c]of Object.entries(o))n in e.formData||(e.formData[n]=c.default!==void 0?c.default:c.type==="integer"?0:"")};return{tools:f,loading:w,fetchTools:b,selectTool:D,selectedTool:t,envValues:a,saveConnection:async()=>{const e={args:t.value.args,command:t.value.command,env:a.value,serverName:t.value.name,toolsId:t.value.id},o=d.params.id;await r.post(`/mcp/agent/${o}/tools`,e),p.back(),u("Tools saved successfully.","success",3e3,"Success")},disableTestConnection:i,testConnection:async e=>{var n,c;const o={env:a.value,name:e.name,command:t.value.command,args:t.value.args,params:e.formData};m.value=void 0;const s=await r.post("/tools/test",o);if(s!=null&&s.isError){const I=((c=(n=s.content)==null?void 0:n[0])==null?void 0:c.text)||"An unknown error occurred.";u(I,"error",3e3,"Error"),i.value=!0}else m.value=s,u("Tool tested successfully.","success",3e3,"Success"),i.value=!1},getFields:e=>{const o=e.inputSchema.properties,s=e.inputSchema.required||[];return Object.entries(o).map(([n,c])=>({name:n,title:c.title||n,type:c.type||"string",required:s.includes(n)}))},testToolResult:m,agentTools:v,updateConnection:async()=>{console.log(a.value);const e=d.params.id;await r.put(`/mcp/agent/${e}/tools/${t.value.id}/env`,a.value),p.back(),u("Tool updated successfully.","success",3e3,"Success")},deleteConnection:async()=>{console.log(a.value);const e=d.params.id;await r.del(`/mcp/agent/${e}/tools/${t.value.id}`),p.back(),u("Tool removed successfully.","success",3e3,"Success")},argsValues:C,fetchMcp:k,findToolById:$,toolId:y}},{persist:{storage:sessionStorage,pick:["selectedTool","disableTestConnection","tools"]}});export{L as u};
